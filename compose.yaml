volumes:
  transcendence_volume:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './transcendence_src/src'
  postgresql_data:
    driver: local

networks:
  transcendence_network:
    driver: bridge

services:
  transcendence:
    container_name: transcendence
    networks:
      - transcendence_network
    build:
      context: transcendence_src
      dockerfile: Dockerfile
    env_file: .env
    depends_on:
      postgresql:
        condition: service_healthy
    volumes:
      - transcendence_volume:/usr/src/app
    restart: unless-stopped
    expose:
      - "8000"

  postgresql:
    image: postgres
    container_name: postgresql
    networks:
      - transcendence_network
    env_file: .env
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -d ${POSTGRES_DB}'"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 10s
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    restart: unless-stopped

  frontend:
    image: frontend
    container_name: frontend
    build: 
      context: frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend/app/:/app
    networks:
      - transcendence_network
    env_file:
      - .env
    restart: unless-stopped
    ports:
      - "3000:3000"